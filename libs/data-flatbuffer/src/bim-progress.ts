// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class BimProgress {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):BimProgress {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsBimProgress(bb:flatbuffers.ByteBuffer, obj?:BimProgress):BimProgress {
  return (obj || new BimProgress()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsBimProgress(bb:flatbuffers.ByteBuffer, obj?:BimProgress):BimProgress {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new BimProgress()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

id():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

externalId():string|null
externalId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
externalId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

capturedAt():string|null
capturedAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
capturedAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

completedAt():string|null
completedAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
completedAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

levelId():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

workflowId():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

bimId():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

static startBimProgress(builder:flatbuffers.Builder) {
  builder.startObject(7);
}

static addId(builder:flatbuffers.Builder, id:number) {
  builder.addFieldInt32(0, id, 0);
}

static addExternalId(builder:flatbuffers.Builder, externalIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, externalIdOffset, 0);
}

static addCapturedAt(builder:flatbuffers.Builder, capturedAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, capturedAtOffset, 0);
}

static addCompletedAt(builder:flatbuffers.Builder, completedAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, completedAtOffset, 0);
}

static addLevelId(builder:flatbuffers.Builder, levelId:number) {
  builder.addFieldInt32(4, levelId, 0);
}

static addWorkflowId(builder:flatbuffers.Builder, workflowId:number) {
  builder.addFieldInt32(5, workflowId, 0);
}

static addBimId(builder:flatbuffers.Builder, bimId:number) {
  builder.addFieldInt32(6, bimId, 0);
}

static endBimProgress(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishBimProgressBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
}

static finishSizePrefixedBimProgressBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, undefined, true);
}

static createBimProgress(builder:flatbuffers.Builder, id:number, externalIdOffset:flatbuffers.Offset, capturedAtOffset:flatbuffers.Offset, completedAtOffset:flatbuffers.Offset, levelId:number, workflowId:number, bimId:number):flatbuffers.Offset {
  BimProgress.startBimProgress(builder);
  BimProgress.addId(builder, id);
  BimProgress.addExternalId(builder, externalIdOffset);
  BimProgress.addCapturedAt(builder, capturedAtOffset);
  BimProgress.addCompletedAt(builder, completedAtOffset);
  BimProgress.addLevelId(builder, levelId);
  BimProgress.addWorkflowId(builder, workflowId);
  BimProgress.addBimId(builder, bimId);
  return BimProgress.endBimProgress(builder);
}
}
